name: Deploy to Elastic Beanstalk with CloudFormation

on:
  push:
    branches:
      - production
      - staging

jobs:
  deploy-to-staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: Staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install dependencies for both backend and frontend
        run: |
          npm install &&
          cd src/client &&
          npm install &&
          cd ../..

      - name: Compile TypeScript and Build Application
        run: npm run build

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get ECR registry URI
        id: ecr
        run: echo "::set-output name=registry::$(aws ecr describe-repositories --query 'repositories[0].repositoryUri' --output text)"

      - name: Build and Push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
          ECR_REPOSITORY: fuelify-ecr-repository
          IMAGE_TAG: ${{env.ENVIRONMENT}}.UserAPI.${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk update-environment \
            --application-name UserAPI \
            --environment-name ${{env.ENVIRONMENT}}-UserAPI \
            --version-label ${{env.ENVIRONMENT}}.UserAPI.${{ github.sha }}

  deploy-to-production:
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: Production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18 # Change this if you need a specific Node.js version

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build # Assumes you have a build script in your package.json

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fuelify-ecr-repository
          IMAGE_TAG: ${{env.ENVIRONMENT}}.UserAPI.${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  # Replace with your desired AWS region

      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk update-environment \
            --application-name UserAPI \
            --environment-name ${{env.ENVIRONMENT}}-UserAPI \
            --version-label ${{env.ENVIRONMENT}}.UserAPI.${{ github.sha }}
