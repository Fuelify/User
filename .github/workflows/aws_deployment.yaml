name: Deploy Application to Elastic Beanstalk Environment

on:
  push:
    branches:
      - production
      - staging

jobs:
  deploy-to-staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: Staging
      S3_BUCKET: fuelify-elasticbeanstalk-deployment-artifacts

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install dependencies for both backend and frontend
        run: |
          npm install &&
          cd src/client &&
          npm install &&
          cd ../..

      - name: Compile TypeScript and Build Application
        run: npm run build

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Zip and Upload Build Artifact to S3 Bucket
        run: |
          zip -r artifact-${{ github.sha }}.zip dist/*
          aws s3 cp artifact-${{ github.sha }}.zip s3://$S3_BUCKET/${{ env.ENVIRONMENT }}/UserAPI/artifact-${{ github.sha }}.zip

      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name UserAPI \
            --version-label ${{ github.sha }} \
            --source-bundle S3Bucket=$S3_BUCKET,S3Key=${{ env.ENVIRONMENT }}/UserAPI/artifact-${{ github.sha }}.zip
          aws elasticbeanstalk update-environment \
            --application-name UserAPI \
            --environment-name ${{ env.ENVIRONMENT }}-UserAPI \
            --version-label ${{ github.sha }}

      #- name: Get ECR registry URI
      #  id: ecr
      #  run: echo "::set-output name=registry::$(aws ecr describe-repositories --query 'repositories[0].repositoryUri' --output text)"

      #- name: Build and Push Docker image to Amazon ECR
      #  env:
      #    ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
      #    ECR_REPOSITORY: fuelify-ecr-repository
      #    IMAGE_TAG: ${{env.ENVIRONMENT}}.UserAPI.${{ github.sha }}
      #  run: |
      #    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-production:
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: Production
      S3_BUCKET: fuelify-elasticbeanstalk-deployment-artifacts

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install dependencies for both backend and frontend
        run: |
          npm install &&
          cd src/client &&
          npm install &&
          cd ../..

      - name: Compile TypeScript and Build Application
        run: npm run build

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Zip and Uploda Build Artifact to S3 Bucket
        run: |
          zip -r artifact-${{ github.sha }}.zip ./dist
          aws s3 cp artifact-${{ github.sha }}.zip s3://$S3_BUCKET/${{ env.ENVIRONMENT }}/UserAPI/artifact-${{ github.sha }}.zip

      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name UserAPI \
            --version-label ${{ github.sha }} \
            --source-bundle S3Bucket=$S3_BUCKET,S3Key=${{ env.ENVIRONMENT }}/UserAPI/artifact-${{ github.sha }}.zip
          aws elasticbeanstalk update-environment \
            --application-name UserAPI \
            --environment-name ${{ env.ENVIRONMENT }}-UserAPI \
            --version-label ${{ github.sha }}

      #- name: Get ECR registry URI
      #  id: ecr
      #  run: echo "::set-output name=registry::$(aws ecr describe-repositories --query 'repositories[0].repositoryUri' --output text)"

      #- name: Build and Push Docker image to Amazon ECR
      #  env:
      #    ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
      #    ECR_REPOSITORY: fuelify-ecr-repository
      #    IMAGE_TAG: ${{env.ENVIRONMENT}}.UserAPI.${{ github.sha }}
      #  run: |
      #    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
